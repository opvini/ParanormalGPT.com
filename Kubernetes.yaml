apiVersion: apps/v1
kind: Deployment
metadata:
  name: paranormalgpt-app-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: paranormalgpt-app
  template:
    metadata:
      labels:
        app: paranormalgpt-app
    spec:
      containers:
      - name: paranormalgpt-container
        image: viniciusop/paranormalgpt.com:v0.1.0
        ports:
        - containerPort: 8054
        volumeMounts:
        - name: env-volume
          mountPath: /paranormalgpt.com/.env
          readOnly: true
      volumes:
      - name: env-volume
        hostPath:
          path: /home/docker/.env

---

apiVersion: v1
kind: Service
metadata:
  name: paranormalgpt-service
spec:
  selector:
    app: paranormalgpt-app
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8054
  type: NodePort

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: paranormalgpt-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: localhost
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: paranormalgpt-service
            port:
              number: 80 # minikube tunnel will expose it - it does not allow other port


## Run it locally
# minikube start
# minikube tunnel

## Copy .env to Minikube file system - needed for secrets
# minikube cp .env /home/docker/

## Apply Kubernetes config
# kubectl apply -f Kubernetes.yaml
# kubectl get all

## Check logs if errors occour in any Pod
# kubectl log <pod>
# kubectl exec -it <pod-name> -- /bin/sh

## Stop the cluster
# minikube stop

## Remove all pods - good to remove old pods
# kubectl delete pods --all
